varying vec4 v_pw;
varying vec3 v_normal;
varying vec2 v_texcoord;
varying float diffuse;

uniform sampler2D tex;
uniform sampler2D iramp;
uniform vec4 specular;
uniform vec4 ambient;
uniform vec4 eyepos;
uniform float A0;
uniform float A1;
uniform float A2;
uniform float shiny;
uniform vec4 fogColor;
uniform float fogStart;
uniform float deltaFog;
uniform float density;
uniform float fogType;
uniform float fogOn;

struct Light{
    vec4 pos;
    vec4 col;
    vec4 dir;
};

uniform Light lights[4];


void main()
{
    gl_FragColor = vec4(0,0,0,0);
    vec3 N = normalize(v_normal);
    vec4 tc = texture2D(tex, v_texcoord);
    gl_FragColor = tc;
    gl_FragColor.a = 1.0;

	float fogPct;
	float dist = length(eyepos - v_pw);

	if (fogType == 0.0) //Linear Fog
	{
	fogPct = (dist - fogStart) / deltaFog;
	fogPct = clamp(fogPct, 0.0, 1.0);
	}

	if (fogType == 1.0) //Exponential Fog
	{
	fogPct = exp(-density * dist);
	}

    for(int i = 0; i < 4; i++)
    {
        vec3 L = lights[i].pos.xyz - lights[i].pos.w * v_pw.xyz;
        float d = length(L);
        L = normalize(L); // the vertex shader will not be enough to handle spotlights... so consider this a hybrid shader. -Don

        float cos_a = dot(-L, lights[i].dir.xyz);
        float spotflag = step(cos_a, lights[i].dir.w);

        gl_FragColor = vec4(0,0,0,0);

        vec4 basecol = texture2D(tex, v_texcoord, 1000.0);
        vec4 illum = texture2D( iramp, vec2(diffuse,0.0));
        gl_FragColor.rgb = basecol.rgb * illum.r;

	if(fogOn == 1.0)
	{
	if (fogType == 0.0) //Linear Fog
            gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor.rgb, fogPct);
        if (fogType == 1.0) //Exponential Fog
            gl_FragColor.rgb = mix(fogColor.rgb, gl_FragColor.rgb, fogPct);
	}
    }
}
