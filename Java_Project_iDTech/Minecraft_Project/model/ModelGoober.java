// Date: 7/22/2014 10:36:40 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.DonLoughry.AllOfTheEverything.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelGoober extends ModelBase
{
  //fields
    ModelRenderer Body;
    ModelRenderer RBLegConnector;
    ModelRenderer LBLegConnector;
    ModelRenderer LFLegConnector;
    ModelRenderer RFLegConnector;
    ModelRenderer Head;
    ModelRenderer RBLeg;
    ModelRenderer LBLeg;
    ModelRenderer RFLeg;
    ModelRenderer LFLeg;
  
  public ModelGoober()
  {
    textureWidth = 64;
    textureHeight = 64;
    setTextureOffset("Head.HeadShape", 20, 36);
    setTextureOffset("Head.NeckShape", 27, 31);
    setTextureOffset("RBLeg.RBFoot", 2, 21);
    setTextureOffset("RBLeg.RBLegPiece2", 4, 13);
    setTextureOffset("LBLeg.LBFoot", 50, 21);
    setTextureOffset("LBLeg.LBLegPiece2", 50, 13);
    setTextureOffset("RFLeg.RFFoot", 2, 39);
    setTextureOffset("RFLeg.RFLegPiece2", 4, 31);
    setTextureOffset("LFLeg.LFFoot", 50, 39);
    setTextureOffset("LFLeg.LFLegPiece2", 50, 31);
    
      Body = new ModelRenderer(this, 14, 13);
      Body.addBox(-4F, -4F, -5F, 8, 8, 10);
      Body.setRotationPoint(0F, 17F, 3F);
      Body.setTextureSize(64, 32);
      Body.mirror = true;
      setRotation(Body, 0.0698132F, 0F, 0F);
      RBLegConnector = new ModelRenderer(this, 10, 8);
      RBLegConnector.addBox(0F, 0F, 0F, 1, 4, 1);
      RBLegConnector.setRotationPoint(-5F, 16F, 6F);
      RBLegConnector.setTextureSize(64, 32);
      RBLegConnector.mirror = true;
      setRotation(RBLegConnector, 0.6457718F, 0F, 0F);
      LBLegConnector = new ModelRenderer(this, 50, 8);
      LBLegConnector.addBox(-1F, 0F, 0F, 1, 4, 1);
      LBLegConnector.setRotationPoint(5F, 16F, 6F);
      LBLegConnector.setTextureSize(64, 32);
      LBLegConnector.mirror = true;
      setRotation(LBLegConnector, 0.6457718F, 0F, 0F);
      LFLegConnector = new ModelRenderer(this, 50, 26);
      LFLegConnector.addBox(0F, 0F, 0F, 1, 4, 1);
      LFLegConnector.setRotationPoint(4F, 16F, -1F);
      LFLegConnector.setTextureSize(64, 32);
      LFLegConnector.mirror = true;
      setRotation(LFLegConnector, 0.3490659F, 0F, 0F);
      RFLegConnector = new ModelRenderer(this, 10, 26);
      RFLegConnector.addBox(0F, 0F, 0F, 1, 4, 1);
      RFLegConnector.setRotationPoint(-5F, 16F, -1F);
      RFLegConnector.setTextureSize(64, 32);
      RFLegConnector.mirror = true;
      setRotation(RFLegConnector, 0.3490659F, 0F, 0F);
    Head = new ModelRenderer(this, "Head");
    Head.setRotationPoint(0F, 17F, -2F);
    setRotation(Head, 0F, 0F, 0F);
    Head.mirror = true;
      Head.addBox("HeadShape", -3F, -3F, -7F, 6, 6, 6);
      Head.addBox("NeckShape", -2F, -2F, -1F, 4, 4, 1);
    RBLeg = new ModelRenderer(this, "RBLeg");
    RBLeg.setRotationPoint(-5F, 18F, 8F);
    setRotation(RBLeg, 0F, 0F, 0F);
    RBLeg.mirror = true;
      RBLeg.addBox("RBFoot", -1F, 5F, -3F, 2, 1, 4);
      RBLeg.addBox("RBLegPiece2", -1F, 0F, -1.5F, 2, 5, 3);
    LBLeg = new ModelRenderer(this, "LBLeg");
    LBLeg.setRotationPoint(5F, 18F, 8F);
    setRotation(LBLeg, 0F, 0F, 0F);
    LBLeg.mirror = true;
      LBLeg.addBox("LBFoot", -1F, 5F, -3F, 2, 1, 4);
      LBLeg.addBox("LBLegPiece2", -1F, 0F, -1.5F, 2, 5, 3);
    RFLeg = new ModelRenderer(this, "RFLeg");
    RFLeg.setRotationPoint(-5F, 18F, 0F);
    setRotation(RFLeg, 0F, 0F, 0F);
    RFLeg.mirror = true;
      RFLeg.addBox("RFFoot", -1F, 5F, -3F, 2, 1, 4);
      RFLeg.addBox("RFLegPiece2", -1F, 0F, -1.5F, 2, 5, 3);
    LFLeg = new ModelRenderer(this, "LFLeg");
    LFLeg.setRotationPoint(5F, 18F, 0F);
    setRotation(LFLeg, 0F, 0F, 0F);
    LFLeg.mirror = true;
      LFLeg.addBox("LFFoot", -1F, 5F, -3F, 2, 1, 4);
      LFLeg.addBox("LFLegPiece2", -1F, 0F, -1.5F, 2, 5, 3);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Body.render(f5);
    RBLegConnector.render(f5);
    LBLegConnector.render(f5);
    LFLegConnector.render(f5);
    RFLegConnector.render(f5); // hopefully, these render statically and decide to behave...
    Head.render(f5);
    RBLeg.render(f5);
    LBLeg.render(f5);
    RFLeg.render(f5);
    LFLeg.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Head.rotateAngleX = -(f4 / 57.29578F);   
    Head.rotateAngleY = f3 / 57.29578F;              
    Body.rotateAngleX = 0.0F; // we don't really want to rotate the body.        
    RFLeg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;        
    LFLeg.rotateAngleX = MathHelper.cos(f * 0.6662F + 3.141593F) * 1.4F * f1;       
    RBLeg.rotateAngleX = MathHelper.cos(f * 0.6662F + 3.141593F) * 1.4F * f1;        
    LBLeg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
  }

}
