varying vec4 v_pw;
varying vec3 v_normal;
varying vec2 v_texcoord;

uniform sampler2D tex;
uniform vec4 specular;
uniform vec4 diffuse;
uniform vec4 ambient;
uniform vec4 eyepos;
uniform float A0;
uniform float A1;
uniform float A2;
uniform float shiny;

struct Light{
    vec4 pos;
    vec4 col;
    vec4 dir;
};

uniform Light lights[4];


void main()
{
    gl_FragColor = vec4(0,0,0,0);
    vec3 N = normalize(v_normal);
    vec4 tc = texture2D(tex, v_texcoord);

    for(int i = 0; i < 4; i++)
    {

        vec3 L = lights[i].pos.xyz - lights[i].pos.w * v_pw.xyz;
        float d = length(L);
        L = normalize(L);

        vec3 V = (eyepos.xyz - v_pw.xyz);
        V = normalize(V);
        vec3 R = reflect(-L, N);
        R = normalize(R);
        float spec = clamp(dot(V, R), 0.0, 1.0);
        spec = pow(spec, specular.a);

        float f = 1.0/(A2*d*d + A1*d + A0);
        f = clamp(f,0.0,1.0);

        float dp = dot(L,N);
        dp = clamp(dp, 0.0, 1.0);

        float cos_a = dot(-L, lights[i].dir.xyz);
        float spotflag = step(cos_a, lights[i].dir.w);

        gl_FragColor.rgb += f  * lights[i].col.rgb * (dp * tc.rgb * diffuse.rgb)  + (spec  * specular.rgb * sign(dp)) + ambient.rgb;
        //gl_FragColor.rgb += vec3(spec);
        gl_FragColor.a += tc.a * diffuse.a;
    }
}
